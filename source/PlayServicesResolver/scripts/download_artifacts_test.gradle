/*
 * Copyright 2018 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.security.MessageDigest

// Logger which captures standard output or error streams to a buffer.
class StandardOutputErrorLogger implements StandardOutputListener {
  // List of lines captured by this logger.
  private def outputList = []

  // Implements StandardOutputListener to capture a log message in
  // outputList.
  void onOutput(CharSequence output) {
    outputList.add(output)
  }

  // Retrieve a string containing the lines aggregated by this logger.
  String getOutput() {
    return outputList.join("")
  }

  // Install the logger on the standard output and error streams of a task and
  // clear the internal buffer.
  def install(taskToLog) {
    outputList = []
    taskToLog.logging.addStandardOutputListener(this)
    taskToLog.logging.addStandardErrorListener(this)
  }

  // Remove the logger from the standard output and error streams of a task and
  // clear the internal buffer.
  def uninstall(taskToLog) {
    taskToLog.logging.removeStandardOutputListener(this)
    taskToLog.logging.removeStandardErrorListener(this)
  }
}

project.ext {
  // Directory which contains this script.
  def scriptDirectory = buildscript.sourceFile.getParentFile()

  // Directory used to execute gradle subprocesses.
  outputDir = new File(System.getProperty("user.dir"),
                       "download_artifacts_test_output")

  // Gradle file under test.
  srcBuildFile = new File(scriptDirectory, "download_artifacts.gradle")
  buildFile = new File(outputDir, srcBuildFile.name)

  // Local test maven repo.
  mavenRepo = new File(scriptDirectory,
                       "download_artifacts_test_assets/m2repository")

  // Fake Android SDK home directory.
  androidHome = new File(scriptDirectory, ".") // TODO(smiles): Use a real maven repo here.

  // All test case tasks (createTestTask() appends to this list)
  testTaskNames = []

  // Header in the download script's output that describes the set of artifacts
  // that have been copied.
  copiedArtifactsHeader = "Copied artifacts:"
  // Header in the download script's output that describes the set of artifacts
  // that are missing.
  missingArtifactsHeader = "Missing artifacts:"
  // Header in the download script's output that describes the set of artifacts
  // that were modified from what the user requested.
  modifiedArtifactsHeader = "Modified artifacts:"

  // Logger which captures the output of a task.
  standardOutputErrorLogger = new StandardOutputErrorLogger()
}

// Generate a task to create the specified directory File.
def createDirectoryTask(directoryFile) {
  def createDirectory = tasks.create(
    name: "create_" + directoryFile.path,
    description: "Creates the directory " + directoryFile.path)
  createDirectory.with {
    outputs.dir directoryFile
    doLast { directoryFile.mkdirs() }
  }
  return createDirectory
}

task copyTestScript(
    type: Copy,
    dependsOn: createDirectoryTask(project.ext.outputDir)) {
  description "Copy the test script into the test project"
  from srcBuildFile
  into outputDir
}

// Generate a task to create a test output directory.
def createTestDirectoryTask(directoryFile) {
  def createDirectory = createDirectoryTask(directoryFile)
  createDirectory.dependsOn copyTestScript
  return createDirectory
}

// Create GradleBuild task StartParameter to execute download_artifacts.build.
def createStartParameters(packagesToCopy, targetDir) {
  def startParameters = new StartParameter()
  startParameters.projectProperties = [
    "ANDROID_HOME": project.ext.androidHome,
    "PACKAGES_TO_COPY": packagesToCopy,
    "TARGET_DIR": targetDir.name,
    "MAVEN_REPOS": mavenRepo.toURI().toString()
  ]
  startParameters.logLevel = logging.level
  return startParameters
}

// Calculate the MD5 checksum of the specified file returning the checksum as
// a string.
def md5ChecksumFile(fileToRead) {
  MessageDigest digest = MessageDigest.getInstance("MD5")
  def contents = fileToRead.bytes
  digest.update(contents, 0, contents.length)
  byte[] md5sum = digest.digest()
  BigInteger bigInt = new BigInteger(1, md5sum)
  return bigInt.toString(16).padLeft(32, '0')
}

// Validate each target files for each source file yielded by the specified task
// are the same.  If outputInputFileMap yields null for an output file, the
// file contents is not validated.
def validateFilesMatch(taskToValidate, outputInputFileMap) {
  def mismatchingFiles = []
  taskToValidate.outputs.files.each {
    def inputFile = outputInputFileMap[it]
    if (inputFile != null && it.exists()) {
      def inputFileChecksum = md5ChecksumFile(inputFile)
      def outputFileChecksum = md5ChecksumFile(it)
      if (inputFileChecksum != outputFileChecksum) {
        mismatchingFiles.add(sprintf("%s (%s) != %s (%s)",
                                     inputFile.path, inputFileChecksum,
                                     it.path, outputFileChecksum))
      }
    }
  }
  if (mismatchingFiles) {
    throw new TaskExecutionException(
      taskToValidate, new Exception(
        sprintf("%s failed, unexpected output file(s)\n%s\n\n%s\n",
                taskToValidate.name, mismatchingFiles.join("\n"),
                project.ext.standardOutputErrorLogger.output)))
  }
}

// Validate all output files of a task exist.
def validateOutputFilesExist(taskToValidate) {
  def missingFiles = []
  taskToValidate.outputs.files.each {
    if (!it.exists()) { missingFiles.add(it) }
  }
  if (missingFiles) {
    throw new TaskExecutionException(
      taskToValidate, new Exception(
        sprintf("%s failed, missing expected file(s)\n%s\n\n%s\n",
                taskToValidate.name, missingFiles.join("\n"),
                project.ext.standardOutputErrorLogger.output)))
  }
}

// Split the output of the download script into sections.
def downloadScriptOutputToSectionsList(output) {
  def validSections = [
    "Copied artifacts:",
    "Missing artifacts:",
    "Modified artifacts:",
  ].toSet()
  def sections = []
  def currentSection = []
  // Adds the current section to the list of sections and flushes the list.
  def endSectionClosure = {
    if (currentSection) {
      sections.add(currentSection.join("\n"))
      currentSection = []
    }
  }
  // Parse sections from the output string.
  output.eachLine {
    if (validSections.contains(it.trim())) {
      currentSection.add(it)
    } else if (it == "") {
      endSectionClosure()
    } else if (currentSection) {
      currentSection.add(it)
    }
  }
  endSectionClosure()
  return sections
}

// Generates a test case that:
// * Attempts to download a set of artifacts specified by packageSpecification
//   into a target directory (derived from taskName) using the downloader
//   script.
// * Validates the expected artifacts are downloaded and match the specified
//   set of source files specified by outputInputFileMap.
// * Validates the script output matches scriptOutput (list of strings where
//   each element is a section of the script's parsed output).
def createTestTask(taskName, taskDescription, packageSpecification,
                   outputInputFileMap, scriptOutput) {
  // Create a target directory relative to the output directory.
  def targetDirFile = new File(project.ext.outputDir, taskName)
  // Move output file paths relative to the target directory and input paths
  // relative to the local maven repo.
  def movedOutputInputFileMap = [:]
  outputInputFileMap.each {
    outputFile, inputFile ->
      movedOutputInputFileMap[new File(targetDirFile, outputFile)] =
        inputFile != null ? new File(project.ext.mavenRepo, inputFile) : null
  }

  def testTask = tasks.create(name: taskName,
                              description: taskDescription,
                              type: GradleBuild,
                              dependsOn: createTestDirectoryTask(targetDirFile))
  testTask.with {
    outputs.files movedOutputInputFileMap.keySet()
    startParameter createStartParameters(packageSpecification,
                                         targetDirFile)
    buildFile project.ext.buildFile
    dir project.ext.outputDir
    doFirst { project.ext.standardOutputErrorLogger.install(it) }
    doLast {
      project.ext.standardOutputErrorLogger.uninstall(it)
      validateOutputFilesExist(it)
      validateFilesMatch(it, movedOutputInputFileMap)
      if (scriptOutput != null) {
        assert downloadScriptOutputToSectionsList(
          project.ext.standardOutputErrorLogger.output) == scriptOutput
      }
    }
  }
  project.ext.testTaskNames.add(taskName)
  return testTask
}

createTestTask(
  "testDownloadAvailable",
  "Downloads a single artifact and it's dependencies from maven.",
  "android.arch.core:common:1.0.0",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadAvailableWithSameName",
  "Downloads artifacts with the same artifact name and their dependencies " +
  "from a maven repo.",
  "android.arch.core:common:1.0.0;android.arch.lifecycle:common:1.0.0;",
  ["android.arch.core.common-1.0.0.jar":
   "android/arch/core/common/1.0.0/common-1.0.0.jar",
   "android.arch.lifecycle.common-1.0.0.jar":
   "android/arch/lifecycle/common/1.0.0/common-1.0.0.jar",
   "com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "android.arch.core.common-1.0.0.jar\n" +
   "android.arch.lifecycle.common-1.0.0.jar\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadUnavailable",
  "Attempts to download a non-existant artifact.",
  "apackage.thatdoes.notexist:9.9.9",
  [],
  ["Missing artifacts:\n" +
   "apackage.thatdoes.notexist:9.9.9"])

createTestTask(
  "testDownloadConflictingVersions",
  "Downloads conflicting versions of an artifact with the download script " +
  "resolving the conflict.",
  "com.android.support:appcompat-v7:23.0.0;" +
  "com.android.support:support-v4:24.0.0;",
  ["com.android.support.animated-vector-drawable-24.0.0.aar":
   "com/android/support/animated-vector-drawable/24.0.0/" +
   "animated-vector-drawable-24.0.0.aar",
   "com.android.support.appcompat-v7-24.0.0.aar":
   "com/android/support/appcompat-v7/24.0.0/appcompat-v7-24.0.0.aar",
   "com.android.support.support-annotations-24.0.0.jar":
   "com/android/support/support-annotations/24.0.0/" +
   "support-annotations-24.0.0.jar",
   "com.android.support.support-v4-24.0.0.aar":
   "com/android/support/support-v4/24.0.0/support-v4-24.0.0.aar",
   "com.android.support.support-vector-drawable-24.0.0.aar":
   "com/android/support/support-vector-drawable/24.0.0/" +
   "support-vector-drawable-24.0.0.aar"],
  ["Copied artifacts:\n" +
   "com.android.support.animated-vector-drawable-24.0.0.aar\n" +
   "com.android.support.appcompat-v7-24.0.0.aar\n" +
   "com.android.support.support-annotations-24.0.0.jar\n" +
   "com.android.support.support-v4-24.0.0.aar\n" +
   "com.android.support.support-vector-drawable-24.0.0.aar",
   "Modified artifacts:\n" +
   "com.android.support:appcompat-v7:23.0.0 --> " +
   "com.android.support:appcompat-v7:24.0.0"])

createTestTask(
  "testDownloadSrcAar",
  "Download a srcaar artifact and validate it's found and " +
  "renamed to an aar in the target directory.",
  "com.google.firebase:firebase-app-unity:4.3.0;",
  ["com.google.firebase.firebase-app-unity-4.3.0.aar":
   "com/google/firebase/firebase-app-unity/4.3.0/" +
   "firebase-app-unity-4.3.0.srcaar"],
  ["Copied artifacts:\n" +
   "com.google.firebase.firebase-app-unity-4.3.0.aar"])

createTestTask(
  "testFirebaseUnityNotVersionLocked",
  "Ensure firebase-.*-unity packages are not locked to the same version as " +
  "Google Play services or Firebase packages.",
  "com.google.firebase:firebase-app-unity:4.3.0;" +
  "com.google.android.gms:play-services-basement:9.8.0;",
  ["com.google.firebase.firebase-app-unity-4.3.0.aar":
   "com/google/firebase/firebase-app-unity/4.3.0/" +
   "firebase-app-unity-4.3.0.srcaar",
   "com.google.android.gms.play-services-basement-9.8.0.aar":
   null /* Downloaded from Google Maven */],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-24.0.0.jar\n" +
   "com.android.support.support-v4-24.0.0.aar\n" +
   "com.google.android.gms.play-services-basement-9.8.0.aar\n" +
   "com.google.firebase.firebase-app-unity-4.3.0.aar"])

createTestTask(
  "testDownloadUsingVersionWildcard",
  "Download an artifact using a version wildcard.",
  "com.android.support:appcompat-v7:23.0.+",
  ["com.android.support.appcompat-v7-23.0.1.aar":
   "com/android/support/appcompat-v7/23.0.1/appcompat-v7-23.0.1.aar",
   "com.android.support.support-annotations-23.0.1.jar":
   "com/android/support/support-annotations/23.0.1/" +
   "support-annotations-23.0.1.jar",
   "com.android.support.support-v4-23.0.1.aar":
   "com/android/support/support-v4/23.0.1/support-v4-23.0.1.aar"],
  ["Copied artifacts:\n" +
   "com.android.support.appcompat-v7-23.0.1.aar\n" +
   "com.android.support.support-annotations-23.0.1.jar\n" +
   "com.android.support.support-v4-23.0.1.aar"])

createTestTask(
  "testDownloadUsingVersionRange",
  "Download an artifact using a version range.",
  "com.android.support:support-annotations:[23,26.1.0]",
  ["com.android.support.support-annotations-26.1.0.jar":
   "com/android/support/support-annotations/26.1.0/" +
   "support-annotations-26.1.0.jar"],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-26.1.0.jar"])

createTestTask(
  "testDownloadSnapshotVersion",
  "Download a snapshot version of an artifact.",
  "com.android.support:support-v4:23.0.1;" +
  "com.android.support:support-annotations:27.0.2-SNAPSHOT",
  ["com.android.support.support-annotations-27.0.2-SNAPSHOT.jar":
   "com/android/support/support-annotations/27.0.2-SNAPSHOT/" +
   "support-annotations-27.0.2-SNAPSHOT.jar"],
  ["Copied artifacts:\n" +
   "com.android.support.support-annotations-27.0.2-SNAPSHOT.jar",
   "Missing artifacts:\n" +
   "com.android.support:support-v4:27.0.2-SNAPSHOT",
   "Modified artifacts:\n" +
   "com.android.support:support-v4:23.0.1 --> " +
   "com.android.support:support-v4:27.0.2-SNAPSHOT"])

project.defaultTasks = project.ext.testTaskNames
